RSA算法基于一个十分简单的数论事实：将两个大质数相乘十分容易，但是想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。
RSA的算法涉及三个参数，n、e1、e2。
其中，n是两个大质数p、q的积，n的二进制表示时所占用的位数，就是所谓的密钥长度。
e1和e2是一对相关的值，e1可以任意取，但要求e1与(p-1)*(q-1)互质；再选择e2，要求(e2*e1)mod((p-1)*(q-1))=1。
（n，e1),(n，e2)就是密钥对。其中(n，e1)为公钥，(n，e2)为私钥。[1] 
RSA加解密的算法完全相同，设A为明文，B为密文，则：A=B^e2 mod n；B=A^e1 mod n；（公钥加密体制中，一般用公钥加密，私钥解密）
e1和e2可以互换使用，即：
A=B^e1 mod n；B=A^e2 mod n;

公式和定理
数和互为素数
任何大于1的整数a能被因式分解为如下唯一形式：
a=p1p2…pl(p1,p2，…，pl为素数）
二、模运算
①{[a(mod n)]×[b(mod n)]}modn≡（a×b)(mod n)
②如果（a×b）=（a×c）（mod n),a与n互素，则
b=c(mod n)
三、费马定理
若p是素数，a与p互素，则
a^(p-1）≡1 （mod p）
四、欧拉定理
欧拉函数φ（n）表示不大于n且与n互素的正整数的个数。
当n是素数，φ（n)=n-1。n=pq,p,q均为素数时，则φ（n)= φ（p）φ（q)=（p-1）（q-1）。
对于互素的a和n，有a^φ（n)≡1(mod n)
如何利用计算机程序从公钥e,以及φ（n）求得私钥d?
问题可以化为求： e *x +φ（n）* y = 1 类型的方程，利用扩展欧几里得算法求解
c++实现
int inv(int e,int p)
{
    int x1,x2,x3,y1,y2,y3;
    int z1,z2,z3;
    x1=1;x2=0;x3=p;
    y1=0;y2=1;y3=e;
    int q;
    for(;;)
    {
        q=x3/y3;
        z1=x1;z2=x2;z3=x3;
        x1=y1;x2=y2;x3=y3;
        y1=z1-y1*q;
        y2=z2-y2*q;
        y3=z3-y3*q;
        if(y3==1)return y2>0?y2:y2+p;
    }
}
java实现
//例子为算47 * x + 30 * y ==1 的解
public class Exercise
{
    public static void main(String[] args)
    {
        int[] p = new int[2];
        int a = 47;
        int b = 30;
        RSA(a,b,p);
        System.out.print("p[0] is: " + p[0] + ";p[1] is：" + p[1]);//p1为私钥
    }
    public static  int[] RSA(int a,int b,int[] p)//这里假设a > b
    {
        if(a%b == 1)
        {
            p[0] = 1;
            p[1] = -(a - 1) / b;
            return p;
        }
            else
        {
                RSA(b,a % b,p);
                int t = p[0];
                p[0] = p[1];
                p[1] = t - (a / b) * p[1]; 
                return p;
        }
    }
}
